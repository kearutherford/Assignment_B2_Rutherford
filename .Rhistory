use_git("https://github.com/stat545ubc-2021/Assignment_B2_Rutherford.git")
library(devtools)
usethis::use_git("https://github.com/stat545ubc-2021/Assignment_B2_Rutherford.git")
use_git()
library(devtools)
use_git()
use_github(https://github.com/stat545ubc-2021/Assignment_B2_Rutherford.git)
use_github("https://github.com/stat545ubc-2021/Assignment_B2_Rutherford.git")
library(devtools)
use_r("summarystatistics")
library(summarystatistics)
load_all()
check()
use_mit_license("Kea Rutherford")
document()
?summarystatistics::summarize_stats
?summarize_stats
use_github("kearutherford/Assignment_B2_Rutherford")
devtools::use_github("kearutherford/Assignment_B2_Rutherford")
devtools::install_github("kearutherford/Assignment_B2_Rutherford")
devtools
library(devtools)
use_pipe()
library(devtools)
document()
load_all()
library(devtools)
install_github("kearutherford/Assignment_B2_Rutherford")
library(datateachr)
library(summarystatistics)
?summarize_stats
summarize_stats(vancouver_trees, root_barrier, diameter)
library(ggplot2)
library(dplyr)
summarize_stats(vancouver_trees, root_barrier, diameter)
library(tidyr)
summarize_stats(vancouver_trees, root_barrier, diameter)
library(devtools)
library(summarystatistics)
?summarize_stats
?summarize_stats
library(tidyverse)
library(datateachr)
datateachr::vancouver_trees %>%
genus_name %in% c("PRUNUS", "ACER", "MAGNOLIA", "QUERCUS", "TILIA")) %>%
summarize_stats(categoric_var = genus_name, numeric_var = diameter)
datateachr::vancouver_trees %>%
genus_name %in% c("PRUNUS", "ACER", "MAGNOLIA", "QUERCUS", "TILIA") %>%
summarize_stats(categoric_var = genus_name, numeric_var = diameter)
summarize_stats(datateachr::vancouver_trees, root_barrier, diameter)
summarize_stats(datateachr::vancouver_trees, genus_name, diameter)
summarize_stats(datateachr::vancouver_trees, root_barrier, diameter,
prob1 = 0.1, prob2 = 0.9)
summarize_stats(datateachr::vancouver_trees, root_barrier, genus_name)
document()
load_all()
?summarize_stats
document()
load_all()
?summarize_stats
usethis::use_readme_rmd()
devtools::install_github("kearutherford/Assignment_B2_Rutherford")
domcument()
document()
load_all()
build_readme()
document()
build_readme()
build_readme()
build_readme()
document()
load_all()
document()
load_all()
?use_package()
use_package("ggplot2", "Imports")
use_package("tidyverse", "Imports")
use_package("tidyr", "Imports")
use_package("dplyr", "Imports")
use_package("tibble", "Imports")
Use_package("datateachr", "Suggests")
use_package("datateachr", "Suggests")
document()
use_package("eval", "Imports")
document()
load_all()
document()
use_test()
document()
test()
check()
document()
test()
check()
document()
check()
document
document()
test()
check()
use_package("stats", "Import")
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
build_readme()
document()
load_all()
library(devtools)
build_readme()
document()
load_all()
?summarize_stats
document()
?install_github
devtools::install_github("kearutherford/Assignment_B2_Rutherford", ref = 0.1.0)
> devtools::install_github("kearutherford/Assignment_B2_Rutherford")
devtools::install_github("kearutherford/Assignment_B2_Rutherford")
library(datateachr)
glimpse(datateachr::parking_meters)
library(tidyverse)
glimpse(datateachr::parking_meters)
glimpse(datateachr::building_permits)
glimpse(datateachr::steam_games)
?use_data()
library(devtools)
?use_data()
class(building_permits$project_value)
table(building_permits$property_use)
library(gapminder)
glimpse(gapminder)
table(gapminder$continent)
sum(is.na(gapminder$lifeExp))
sum(is.na(gapminder$pop))
sum(is.na(gapminder$gdpPercap))
devtools::install_github("kearutherford/Assignment_B2_Rutherford")
library(summarystatistics)
summarize_stats(gapminder, continent, lifeExp)
summarize_stats(building_permits, type_of_work, project_value)
sum(is.na(bulding_permits$project_value))
sum(is.na(building_permits$project_value))
summarize_stats(building_permits, type_of_work, project_value, na.rm = FALSE)
test_that("Test that NA handling works", {
expect_error(summarize_stats(building_permits, type_of_work, project_value, na.rm = FALSE))
})
library(testthat)
test_that("Test that NA handling works", {
expect_error(summarize_stats(building_permits, type_of_work, project_value, na.rm = FALSE))
})
document()
load_all()
document()
check()
glimpse(gapminder)
summarize_stats(vancouver_trees, root_barrier, diameter)
summarize_stats(gapminder, continent, gdpPercap)
summarize_stats(gapminder, continent, pop)
glimpse(gapminder_unflitered)
glimpse(gapminder_unfiltered)
sum(is.na(gapminder_unfiltered$gdpPercap))
sum(is.na(gapminder_unfiltered$pop))
sum(is.na(gapminder_unfiltered$lifeExp))
gapminder
?summarize_stats
?use_package
use_package(gapminder, type = "Suggests")
use_package("gapminder", "Suggests")
document()
load_all()
# Load required packages -------------------------------------------------------
suppressPackageStartupMessages(library(datateachr))
suppressPackageStartupMessages(library(gapminder))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(summarystatistics))
# Load required packages -------------------------------------------------------
suppressPackageStartupMessages(library(datateachr))
suppressPackageStartupMessages(library(gapminder))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(magrittr))
suppressPackageStartupMessages(library(tibble))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(summarystatistics))
